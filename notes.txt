## Docker

  # Start ELK cluster.
  sudo docker-compose -f /vagrant/docker-compose.yml up -d

  # Stop ELK cluster.
  sudo docker-compose -f /vagrant/docker-compose.yml stop

  # Restart ELK cluster.
  sudo docker-compose -f /vagrant/docker-compose.yml restart

## ELK Cluster

  # Scale up elasticsearch nodes.
  sudo docker-compose scale esnode=2

  # Get cluster status
  curl -XGET 'http://localhost:9200/_cluster/state?pretty'

  # Get all indexes.
  curl -XGET 'http://localhost:9200/_all?pretty'

  # Get info on specific index.
  curl -XGET 'http://localhost:9200/<index_name>/?pretty'

## Curator

  # Get all indexes.
  curator --host localhost show indices --timestring %Y.%m.%d

  # Get all indexes older than 10 days.
  curator --host localhost show indices --timestring %Y.%m.%d --time-unit days --older-than 10

  # Close all indexes older than 10 days.
  curator --host localhost close indices --timestring %Y.%m.%d --time-unit days --older-than 10

  # Open all indexes.
  curator --host localhost open indices --all-indices

  # Open all indexes older than 10 days
  curator --host localhost open indices --timestring %Y.%m.%d --time-unit days --older-than 10

## Buckler build

You can now setup the Buckler development environment.

    mkdir src && cd src/
    git clone https://github.com/kumina/Buckler-project.git buckler-project
    virtualenv --system-site-packages buckler-project

Now install zc.buildout and run buildout. Note: you will be asked for your credentials.

    cd buckler-project && bin/pip install zc.buildout && bin/buildout -c development.cfg

Copy the configuration file.

    cp /vagrant/buckler_config.py Buckler/settings/config.py

And start the buckler instance.

    bin/django runserver 0.0.0.0:8000

You can now start testing Buckler. The credentials are in the configuration file.

    /vagrant/src/buckler-project/Buckler/settings/config.py
